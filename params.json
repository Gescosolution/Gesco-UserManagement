{"name":"Gesco-UserManagement","tagline":"Submódulo para Autenticación, Gestión de Usuarios y datos de Empleados","body":"# Gesco-UserManagement\r\nSubmódulo correspondiente a la administración y control de datos de Usuarios y Empleados, enmarcado en la aplicación Gesco.\r\n\r\n[![Build Status](https://travis-ci.org/Gescosolution/Gesco-UserManagement.svg?branch=master)](https://travis-ci.org/Gescosolution/Gesco-UserManagement)\r\n\r\nPublicado bajo licencia GNU GENERAL PUBLIC LICENSE Version 2.\r\n\r\nEl presente módulo participa en el certamen de Proyectos libres de la Universidad de Granada 2015-2016, como parte del proyecto general [Gesco](https://github.com/Gescosolution/Gesco). Las bases de dicho certamen se encuentran [aquí](https://docs.google.com/document/d/16UsdUV_XXuPUh-Imz4PSgh-2ES_YaAJpZ8fNrbTVpMA/edit).\r\n\r\n**Elaborado por:** Abel Josué Francisco Agra ([@jfrancisco4490](https://github.com/jfrancisco4490))\r\n\r\n##Descripción\r\n\r\nConsiste en un módulo _web_ para el sistema Gesco (Manejo y Planificación de Proyectos). \r\n\r\nEste módulo se encarga de gestionar, manejar y controlar la información correspondiente a los empleados de una determinada empresa. En principio, y para dar flexibilidad al sistema, se supone que la empresa puede tener múltiples oficinas y/o compañías filiales asociadas.\r\n\r\nEl presente módulo también debe incluir el desarrollo de un mecanismo de autenticación en la aplicación. Este mecanismo debe adaptarse a los estándares de seguridad de la empresa, la cual podría tener desplegado en su plataforma interna un sistema de autenticación previo.\r\n\r\nLa integración con los mecanismos de seguridad de la empresa deben extenderse incluso a la definición de roles en el sistema, sin necesidad de cambiar la estructura organizacional de la compañía. Es decir, el módulo debe asociar los cargos de trabajo existentes en la compañía, a un rol válido y definido en el sistema de permisos de la aplicación Gesco.\r\n\r\nCorresponde al módulo de Gesco integrarse con el sistema centralizado de seguridad y manejo de roles de la compañía, a fin de identificar el perfil del usuario que solicita el acceso a la aplicación, así como las funcionalidades o actividades que puede llevar a cabo (o no) en el sistema.\r\n\r\nAdemás del área de autenticación y usuarios, el presente módulo también debe incluir un área de ingreso y edición de datos de empleados de la empresa.\r\n\r\nComo ya se ha indicado, la empresa puede contar con numerosas oficinas y/o empresas filiales, cada una de las cuales podría tener un sistema de almacenamiento de datos de empleados que sea independiente al resto. Por ello, es necesario que el sistema se comunique con las bases de datos de cada oficina, a fin de consultar los datos de los empleados que tienen registrados, y poder realizar una especie de _importación_ en la plataforma (evitar inconsistencias al momento de registrar los datos de un nuevo empleado en Gesco).\r\n\r\n##Requerimientos\r\n\r\nA continuación se listan algunos requerimientos básicos del módulo de administración de usuarios:\r\n\r\n* Controlar el acceso al sistema, realizando consultas en la plataforma centralizada de autenticación de usuarios y manejo de roles ya definida en la empresa.\r\n* Determinar el acceso que tiene el usuario a la información y funcionalidades en el sistema, en base a su cargo en la empresa y la oficina a la que pertenece. El rol debe ser el resultado de \"convertir\" el cargo del usuario en la empresa (existente en el sistema centralizado de autenticación) en un perfil válido ya definido en Gesco.\r\n* Gestionar los datos de los empleados de la empresa (Registro y Edición).\r\n* Importar de forma \"automática\" la información de algunos empleados, tomándolos de la fuente de datos correspondientes (en base a la oficina o empresa filial a la que pertenezca el empleado).\r\n* Estandarizar la presentación de información de los empleados de la compañía, cuando ésta provenga de diversas fuentes de datos.\r\n* Generar informes estadísticos, gráficos y otras consultas básicas sobre el acceso de usuarios a la plataforma (Administrador).\r\n    \r\n##Motivación\r\n\r\nEn la actualidad, la gran mayoría de las empresas medianas y grandes cuentan con sistemas centralizados de autenticación y acceso de usuarios, de tal manera que todas las aplicaciones o sistemas que se desplieguen en su plataforma tecnológica deban integrarse a dicho sistema centralizado. Esto evita la redundancia de datos, y promueve la estandarización en la definición de roles y permisos en la institución. \r\n\r\nEs por esto que la motivación principal radica en el hecho de que el presente módulo de Administración de Usuarios puede ser adaptado a numerosas situaciones y realidades de empresas o instituciones sobre las que se quiera implantar el sistema Gesco. La flexibilidad del módulo permite que pueda ser incluido en numerosos contextos de seguridad y acceso de usuarios, o de distribución de la información. Más aún, el módulo puede ser desplegado para empresas pequeñas, medianas, o incluso grandes con numerosas oficinas y/o compañías filiales.\r\n\r\nFinalmente, el presente desarrollo permitirá adquirir conocimientos en implementación/pruebas de módulos de forma independiente, elaboración de mecanismos de integración con sistemas externos y heterogéneos, y, por supuesto, despliegue de aplicaciones y componentes en la nube (_Cloud Computing_).\r\n\r\n##Procedimiento de Realización\r\n\r\nEl desarrollo del proyecto seguirá los siguientes lineamientos:\r\n\r\n* La metodología de desarrollo de software será [DevOps](https://en.wikipedia.org/wiki/DevOps), la cual enfoca el proceso de implementación y despliegue hacia las pruebas (principalmente unitarias, aunque no de forma exclusiva), la integración continua, la automatización de tareas y un enfoque multidisciplinario del trabajo.\r\n* Al ser un sistema _web_, se elaborará bajo el patrón [Modelo-Vista-Controlador](https://es.wikipedia.org/wiki/Modelo%E2%80%93vista%E2%80%93controlador).\r\n* Para la interfaz del sistema y navegación se utilizará el motor de plantillas _web_ [JADE](http://jade-lang.com/).\r\n* Para desarrollar y controlar la lógica del módulo, se empleará [Node.js](https://nodejs.org/en/).\r\n* Para validar la integración del módulo con un sistema de autenticación externo, se configurará un servidor [Redis](http://redis.io/).\r\n* A fin de simular la distribución y carga de datos de empleados de diversas fuentes de datos, se definirán al menos dos (2) bases de datos: una con [MySQL](http://www.mysql.com/), y otra con [VoltDB](https://voltdb.com/).\r\n* Se utilizará el _framework_ [Express](http://expressjs.com/), para el desarrollo de aplicaciones _web_ basadas en _Node.js_\r\n* Para la realización de pruebas se empleará el _framework_ [Mocha](https://mochajs.org/).\r\n* Para la ejecución de la integración continua se planea utilizar el servicio [Travis CI](https://travis-ci.org/).\r\n* El despliegue automático se realizará mediante [Flightplan](https://www.npmjs.com/package/flightplan).\r\n* Finalmente, y al haber alcanzado un nivel de funcionalidad estable, desplegar el módulo en una plataforma ofrecida como servicio (_PaaS_), tal como [OpenShift](https://www.openshift.com/). \r\n\r\n##Relación con la asignatura\r\n\r\nEl desarrollo del módulo de Administración de Usuarios de Gesco, se corresponde con la asignatura de _Cloud Computing_, al menos, en los siguientes aspectos:\r\n\r\n* La implementación, proceso de pruebas y despliegue del módulo se realizará aplicando los conceptos indicados en la asignatura, a saber: Desarrollo Basado en Pruebas, Distribución de Componentes, Integración Continua, Automatización de tareas y actividades, Aprovisionamiento de Software y Despliegue Automático.\r\n* La integración del presente módulo con sistemas externos que no forman parte de la aplicación Gesco, y que, en principio, podrían estar distribuidos geográfica y tecnológicamente, tales como las fuentes de datos de empleados de cada oficina, o el sistema LDAP de autenticación centralizada.\r\n\r\n##Elección de Herramientas o Sistemas para el Desarrollo del Proyecto\r\n\r\n### Construcción\r\n\r\nPara especificar y ejecutar tareas comunes o recurrentes en el desarrollo del proyecto, se ha decidido utilizar [Grunt](http://gruntjs.com/), una herramienta para automatizar actividades en _JavaScript_.\r\n\r\nUna de las principales ventajas de _Grunt_ es que cuenta con numerosos complementos (_plugins_) que permiten automatizar prácticamente cualquier actividad que deba ser llevada a cabo en el desarrollo del proyecto de forma reiterada, tales como instalación de dependencias, análisis sintáctico del código fuente, minificación y/o concatenación de archivos _JS_, o ejecución de pruebas unitarias, entre muchas otras.\r\n\r\nEn el archivo [Gruntfile.js](https://github.com/Gescosolution/Gesco-UserManagement/blob/master/Gruntfile.js) del proyecto se pueden ver las especificaciones de dichas actividades o tareas.\r\n\r\n###Test\r\n\r\nPara definir y realizar las pruebas unitarias en el sistema, se ha seleccionado [Mocha](https://mochajs.org/), un _framework_ de pruebas para _JavaScript_ que permite realizar tests asíncronos sobre aplicaciones implementadas en _Node.js_.\r\n\r\nLas razones por las que se decidió utilizar este sistema de _Test_ son las siguientes:\r\n\r\n* Los _tests_ son escritos con un \"Desarrollo Basado en el Comportamiento\" ([Behavior-Driven Development](https://en.wikipedia.org/wiki/Behavior-driven_development) ó [BDD](https://en.wikipedia.org/wiki/Behavior-driven_development)), utilizando una serie de sentencias o constructores que buscan simular el \"lenguaje natural\" (expresado en inglés). Esta manera de especificar las pruebas es sumamente intuitiva, y aún cuando no se esté muy familiarizado con el _framework_, se pueden empezar a diseñar _tests_ realistas y relativamente complejos en poco tiempo.\r\n* Se puede utilizar cualquier librería de aserciones (_assertions_) definida para realizar y especificar las pruebas, lo cual redunda en una alta flexibilidad y variedad al momento de diseñar los _tests_.\r\n* Contiene múltiples elementos para facilitar las pruebas en ambientes asíncronos (representativo de _Node.js_).\r\n* El _framework_ de pruebas _mocha_ se ejecuta en _Node.js_, por lo que presenta una alta integración y cohesión con este lenguaje, y permite realizar las pruebas de aplicaciones escritas en _Node.js_ de forma mucho más sencilla y directa.\r\n\r\nAdemás del conjunto central de funcionalidades de _mocha_, fue necesario incluir otros módulos o componentes para realizar la totalidad de las pruebas definidas. Estos módulos/librerías son:\r\n\r\n* _assert_: la librería básica para definir aserciones de prueba y validarlas en _Node.js_. Basicamente, es una manera de que _Node.js_ ejecute pruebas o tests \"sobre sí mismo\". Con esta librería, se especifican sentencias que deben ser ciertas en un momento dado de la ejecución, y la librería valida que efectivamente sea así.\r\n* _should_: una librería de aserciones más amplia y diversa que la anterior (_assert_). Además de sus extensiones de funcionalidad y mayor utilidad en general, una de sus principales ventajas es que permite especificar las sentencias de prueba de forma muy expresiva y natural.\r\n* _supertest_: librería de aserciones para facilitar y simplificar las pruebas sobre servidores y solicitudes _HTTP_.\r\n\r\nEn el archivo [test.js](https://github.com/Gescosolution/Gesco-UserManagement/blob/master/test/test.js) del proyecto, se pueden observar las pruebas unitarias y grupos de tests que han sido definidos(as) durante el desarrollo actual.\r\n\r\n###Integración Continua\r\n\r\nPara llevar a cabo la integración continua se ha elegido el servicio [Travis CI](https://travis-ci.org/), para construir (_build_) y probar (_test_) aplicaciones escritas en múltiples lenguajes (particularmente _Node.js_) alojadas en _GitHub_.\r\n\r\nLas razones por las que se decidió utilizar este sistema de Integración Continua son las siguientes:\r\n\r\n* Posee una alta integración con _GitHub_, pudiendo \"activar\" los repositorios sobre los cuales se quiere aplicar la integración continua de forma prácticamente directa.\r\n* La configuración inicial es muy sencilla, ya que el archivo de configuración de la integración continua (_.travis.yml_) es muy fácil de elaborar, pero a la vez posee numerosas opciones para definir el ambiente de ejecución de la integración continua.\r\n* Cada vez que se materialice un cambio en el repositorio de _GitHub_, se iniciará la ejecución de la integración continua y pruebas de forma automática.\r\n* El servicio notifica de forma inmediata sobre los errores ocurridos en la construcción del proyecto\r\n* El ambiente en el que se ejecutan las pruebas es altamente configurable, pudiendo ejecutar numerosas acciones e instalaciones (por ejemplo, de paquetes y otros programas), tal como si se estuviera en un sistema operativo independiente. De esta forma, si las pruebas requieren de sistemas \"externos\" (tal como _OpenLDAP_ o _MySQL_), estos pueden ser instalados en el ambiente de ejecución de _Travis-CI_ utilizando comandos _UNIX_.\r\n* Los grupos de pruebas pueden ser ejecutados simultáneamente en diversas versiones de un mismo lenguaje de programación (validando la compatibilidad de la aplicación).\r\n\r\n###Plataforma como Servicio (_PaaS_)\r\n\r\nPara el despliegue de la aplicación se ha elegido el servicio [OpenShift](https://www.openshift.com/), para publicar el contenido y funcionalidades del sistema en línea.\r\n\r\nLas razones por las que se decidió utilizar este sistema de Plataforma como Servicio son las siguientes:\r\n\r\n* Cuenta con soporte para numerosos lenguajes de programación y aplicaciones de desarrollo _web_, tales como _Java_, _Python_, _PHP_, _Ruby_, y, por supuesto _node.js_.\r\n* Provee acceso a almacenamiento persistente para las aplicaciones (_gears_), hasta un (1) Gb para cuentas gratuitas. Este almacenamiento permite incluir contenido generado por la aplicación u otro tipo de datos que deban conservarse en diferentes despliegues o ejecuciones del sistema.\r\n* Dispone de un extenso grupo de servicios adicionales que pueden ser incluidos en el ambiente de la aplicación. Estos complementos, conocidos como \"Cartuchos\" (_Cartridges_) pueden ser declarados como dependencias de la aplicación durante la creación inicial del sistema, o pueden ser agregados de forma dinámica tras haber desplegado la aplicación (en caso de que ocurran cambios en la implementación o diseño del sistema).\r\n* Entre los complementos más conocidos y utilizados, se encuentran los servicios de bases de datos, tanto tradicionales (_MySQL_ y _PostgreSQL_), como novedosos (_Redis_ y _MongoDB_, entre otros). Dado que el proyecto _Gesco-UserManagement_ necesita integrar (o simular la integración) de diversas fuentes de datos, contar con múltiples opciones de prueba y configuración de estos servicios resulta sumamente útil.\r\n* La configuración de los complementos adicionales (por ejemplo, aquellos que requieran autenticación, como _MySQL_ o _PostgreSQL_) se realiza mediante el uso de variables de entorno que genera automáticamente la plataforma. Utilizando estas variables en el código de programación de la aplicación, se puede aumentar la portabilidad y compatibilidad del sistema en múltiples ambientes de desarrollo, prueba y despliegue (simplemente hay que definir estas variables en cada ambiente en el que se desee ejecutar la aplicación, utilizando la información del servicio que se esté utilizando).\r\n* Los despliegues pueden configurarse para que se realicen automáticamente desde el sistema de Integración Continua. En el proyecto _Gesco-UserManagement_ se utiliza _Travis-CI_, el cual puede ejecutar el despliegue de la aplicación en _OpenShift_ tras superar exitosamente los _tests_ unitarios que han sido definidos. La comunicación entre _Travis-CI_ y _OpenShift_ se realiza agregando sencillas instrucciones al archivo de configuración _.travis.yml_ del proyecto.\r\n* Se integra de forma automática y completa con la configuración del proyecto definida en el archivo _package.json_, así como con _npm_.\r\n* Permite el acceso directo a los _logs_ y otros archivos informativos de la aplicación (y cada uno de los despliegues de la misma).\r\n* Permite realizar conexiones de tipo _SSH_ a la aplicación desplegada, utilizando los comandos propios de _rhc_.\r\n* Los comandos de _OpenShift_ (_rhc_) permiten realizar numerosas acciones y operaciones sobre la aplicación deplegada, tales como crear nuevas aplicaciones, agregar complementos de forma dinámica, editar la configuración de una aplicación desplegada, consultar el estatus del sistema y los servicios agregados, etc.\r\n* Las cuentas de tipo gratuita en _OpenShift_ tienen acceso a todos los complementos y servicios adicionales (_cartridges_) disponibles. Esta opción no la tienen otros sistemas de Plataforma como Servicio gratuitos.\r\n\r\nPara configurar el despliegue automático de la aplicación en _OpenShift_, se siguieron los siguientes pasos:\r\n\r\n* Instalar herramienta de línea de comandos de _Travis-CI_ (requiere al menos versión _1.9.3_ de _Ruby_)\r\n\r\n `gem install travis -v 1.8.0 --no-rdoc --no-ri`\r\n\r\n* Instalar herramienta de línea de comandos de _OpenShift_ (requiere tener instalado _Ruby_ y _Git_)\r\n\r\n `gem install rhc`\r\n \r\n* Crear aplicación de _OpenShift_ (con ambiente de despliegue de _node.js_)\r\n\r\n `rhc app create gescousermanagement nodejs-0.10`\r\n \r\n* Configurar el archivo de configuración de _Travis-CI_, agregando la información necesaria en la sección _deploy_ para realizar el despliegue automático de la aplicación en _OpenShift_. En esta sección se indican los datos de la cuenta de _OpenShift_ que realizará el despliegue, la aplicación ya creada sobre la cual se actualizará el código fuente, y el dominio de _OpenShift_ (ya definido) en el que se alojará la aplicación. Esta configuración puede ser realizada con el comando\r\n\r\n `travis setup openshift`\r\n \r\n La configuración anterior permite que _Travis-CI_ despliegue automáticamente la aplicación en _OpenShift_ cuando se ejecuten y superen de forma exitosa todos los _tests_ unitarios definidos.\r\n \r\n El archivo de configuración de _Travis-CI_ actualizado puede ser consultado [aquí](https://github.com/Gescosolution/Gesco-UserManagement/blob/master/.travis.yml).\r\n\r\n* Agregar complemento (_cartridge_) para incluir servicio de _Redis_ en la aplicación creada\r\n\r\n `rhc add-cartridge http://cartreflect-claytondev.rhcloud.com/reflect?github=smarterclayton/openshift-redis-cart -a gescousermanagement`\r\n \r\n* Agregar complemento (_cartridge_) para incluir servicio de _MySQL_ en la aplicación creada\r\n\r\n `rhc cartridge add mysql-5.5 -a gescousermanagement`\r\n \r\n* Agregar complemento (_cartridge_) para incluir servicio de _PostgreSQL_ en la aplicación creada\r\n\r\n `rhc cartridge add postgresql-9.2 -a gescousermanagement`\r\n \r\n* Para incrementar la portabilidad de la aplicación entre los ambientes de desarrollo, pruebas y despliegue, se debe incluir en el código fuente de la aplicación el uso de las variables de entorno de _OpenShift_, especialmente aquellas definidas por los servicios adicionales. Algunos ejemplos de esto se pueden observar en:\r\n\r\n - [Controlador para Autenticación](https://github.com/Gescosolution/Gesco-UserManagement/blob/master/controllers/authController.js): utilizando las variables de configuración de los servicios de _Redis_ (_OPENSHIFT-REDIS-_...) y _MySQL_ (_OPENSHIFT-MYSQL-DB-_...)\r\n - [Configuración de Servicio _Web_ a desplegar](https://github.com/Gescosolution/Gesco-UserManagement/blob/master/bin/www): incluyendo las variables de configuración del servidor _web_ de _Express_ para la publicación de la aplicación (_OPENSHIFT-NODEJS-_...)\r\n \r\nEl archivo con los comandos requeridos para la creación y definición de la infraestructura de la aplicación puede ser consultado en [appOpenShift.sh](https://github.com/Gescosolution/Gesco-UserManagement/blob/master/config/deploy/appOpenShift.sh).\r\n\r\n### Virtualización ligera (Contenedores)\r\n\r\nPara la construcción y despliegue de un ambiente de pruebas funcional para la aplicación desarrollada, se utilizan contenedores [_Docker_](https://www.docker.com/).\r\n\r\nLas razones para utilizar a _Docker_ como mecanismo de virtualización ligera con contenedores son las siguientes:\r\n\r\n* Despliegue rápido de aplicaciones. Los contenedores incluyen los requerimientos mínimos de ejecución de las aplicaciones, reduciendo su tamaño y permitiendo que sean desplegados de forma rápida y ágil.\r\n* Portabilidad entre distintos entornos (máquinas _host_). Una aplicación y todas sus dependencias son incluidas en un mismo y único contenedor que es independiente de la versión _Linux_ instalada en la máquina anfitriona, de la distribución de la plataforma, y del modelo de despliegue. Cualquier contenedor puede ser transferido a otra máquina que tenga instalado _Docker_, y ejecutado en esta sin ningún problema de compatibilidad.\r\n* Control de versiones y reutilización de componentes. Se pueden supervisar y revisar versiones sucesivas de un mismo contenedor, inspeccionar diferencias entre las mismas, o volver a versiones anteriores. Los contenedores reutilizan componentes de capas (_layers_) anteriores, lo cual los hace evidentemente más ligeros.\r\n* Los repositorios remotos pueden ser publicados y compartidos con otros desarrolladores.\r\n* Mantenimiento simplificado. Al utilizar _Docker_, se reduce el esfuerzo y los riesgos de problemas con las dependencias tecnológicas de las aplicaciones.\r\n\r\nPara configurar la creación de una imagen con un contenedor _Docker_ en la aplicación, se realizaron los siguientes pasos:\r\n\r\n* Definir un archivo de configuración de _Docker_, denominado _Dockerfile_, ubicado en el directorio principal (raíz) del proyecto. El archivo _Dockerfile_ creado cuenta con las siguientes características:\r\n\r\n - Se especifica la imagen de _Docker_ base sobre la cual se definirán las dependencias de la aplicación, en este caso es una instalación simple de _Ubuntu 14.04_\r\n \r\n  `FROM ubuntu:14.04`\r\n \r\n - Instalación de paquetes y herramientas requeridas por el proyecto para su construcción y despliegue. Se utiliza el gestor de componentes de _Ubuntu_ (_apt-get_) para instalar _git_ (descarga del repositorio con el proyecto), _NodeJS_ (lenguaje de programación sobre el que se construye y desarrolla la aplicación), _Redis_ y _MySQL_ (servicios de almacenamiento persistente de datos utilizado en el ambiente de pruebas de la aplicación)\r\n \r\n  ```\r\n  RUN apt-get update && apt-get install -y \\\r\n\t  git \\\r\n\t  git-core \\\r\n\t  nodejs \\\r\n\t  npm \\\r\n\t  redis-server \\\r\n\t  mysql-server \\\r\n  && apt-get clean \\\r\n  && rm -rf /var/lib/apt/lists/*\r\n  ```\r\n\r\n - Exponer o publicar los puertos de los servicios de base de datos (_Redis_ y _MySQL_) a utilizar por la aplicación en el contenedor\r\n \r\n  ```\r\n  EXPOSE 6379\r\n  EXPOSE 3306\r\n  ```\r\n\r\n - Definir un directorio de almacenamiento para guardar los datos, _logs_ y otros archivos de configuración propios de los servicios de base de datos instalados\r\n \r\n  `VOLUME [\"/gesco-user-management/db/data\"]`\r\n \r\n - Inicializar los servicios de _Redis_ y _MySQL_ en el contendor (configuración básica por defecto)\r\n \r\n - Clonar el repositorio con el código fuente asociado a la aplicación _Gesco-UserManagement_\r\n \r\n - Definir como directorio base de trabajo para los comandos en el contenedor, al directorio del repositorio del proyecto\r\n \r\n  `WORKDIR \"/Gesco-UserManagement\"`\r\n  \r\n - Instalar dependencias de la aplicación (librerías de _NodeJS_)\r\n \r\n - Desplegar aplicación, utilizando _Grunt_. El archivo con las actividades de despliegue se puede identificar [aquí](https://github.com/Gescosolution/Gesco-UserManagement/blob/master/Gruntfile.js).\r\n \r\n - Definir actividades a realizar de forma automática cuando se inicie (_run_) la imagen del contenedor. Las actividades a realizar están especificadas en un _script_ denominado [start_docker_image.sh](https://github.com/Gescosolution/Gesco-UserManagement/blob/master/start_docker_image.sh). Basicamente, las actividades son iniciar los servicios de _Redis_ y _MySQL_ (en segundo plano), y ejecutar la aplicación (_npm start_)\r\n \r\n El archivo de configuración de _Docker_ puede ser consultado [aquí](https://github.com/Gescosolution/Gesco-UserManagement/blob/master/Dockerfile).\r\n \r\n* Asociar la cuenta en _Github_ en la que se encuentra el repositorio del proyecto con una cuenta correspondiente en [_Docker Hub_](https://hub.docker.com/).\r\n\r\n* Definir una \"Construcción Automática\" (_Automated Build_) de la imagen del contenedor _Docker_, desde _Docker Hub_. Con esto, cada vez que se realiza una actualización (_push_) del repositorio origen del código del proyecto, se re-construye de forma automática la imagen _Docker_ correspondiente.\r\n\r\nLa imagen _Docker_ publicada del proyecto _Gesco-UserManagement_ puede ser consultada [aquí](https://hub.docker.com/r/jfrancisco4490/gesco-usermanagement/).\r\n\r\nPara descargar la imagen anterior, se puede utilizar directamente el comando\r\n\r\n `docker pull jfrancisco4490/gesco-usermanagement`\r\n \r\nPara ejecutar la imagen tras su descarga, se ejecuta\r\n\r\n `docker run jfrancisco4490/gesco-usermanagement`\r\n\r\nSi no se desea descargar directamente la imagen desde _Docker Hub_, se puede construir de forma local, utilizando el _Dockerfile_ anterior, y ejecutando el comando:\r\n\r\n`docker build -t <etiqueta_imagen> <ubicacion_dockerfile>`","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}